// Code generated by protoc-gen-go.
// source: proto/company/company.proto
// DO NOT EDIT!

/*
Package company is a generated protocol buffer package.

It is generated from these files:
	proto/company/company.proto

It has these top-level messages:
	Company
	CompanyListResponse
	CompanyResponse
*/
package company

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import grpc_gateway_common "git.simplendi.com/FirmQ/frontend-server/server/proto/common"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Company struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id"`
	IsEnabled bool   `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled"`
	Name      string `protobuf:"bytes,3,opt,name=name" json:"name"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Company) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Company) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CompanyListResponse struct {
	Meta *grpc_gateway_common.MetaResponse `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Data []*Company                        `protobuf:"bytes,2,rep,name=data" json:"data"`
}

func (m *CompanyListResponse) Reset()                    { *m = CompanyListResponse{} }
func (m *CompanyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CompanyListResponse) ProtoMessage()               {}
func (*CompanyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompanyListResponse) GetMeta() *grpc_gateway_common.MetaResponse {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CompanyListResponse) GetData() []*Company {
	if m != nil {
		return m.Data
	}
	return nil
}

type CompanyResponse struct {
	Meta *grpc_gateway_common.MetaResponse `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Data *Company                          `protobuf:"bytes,2,opt,name=data" json:"data"`
}

func (m *CompanyResponse) Reset()                    { *m = CompanyResponse{} }
func (m *CompanyResponse) String() string            { return proto.CompactTextString(m) }
func (*CompanyResponse) ProtoMessage()               {}
func (*CompanyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompanyResponse) GetMeta() *grpc_gateway_common.MetaResponse {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CompanyResponse) GetData() *Company {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Company)(nil), "grpc.gateway.company.Company")
	proto.RegisterType((*CompanyListResponse)(nil), "grpc.gateway.company.CompanyListResponse")
	proto.RegisterType((*CompanyResponse)(nil), "grpc.gateway.company.CompanyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompanyService service

type CompanyServiceClient interface {
	CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*grpc_gateway_common.IDResponse, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error)
	GetCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*CompanyResponse, error)
	GetCompanies(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompanyListResponse, error)
	DeleteCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error)
}

type companyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompanyServiceClient(cc *grpc.ClientConn) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*grpc_gateway_common.IDResponse, error) {
	out := new(grpc_gateway_common.IDResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.company.CompanyService/CreateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error) {
	out := new(grpc_gateway_common.CommonResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.company.CompanyService/UpdateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*CompanyResponse, error) {
	out := new(CompanyResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.company.CompanyService/GetCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanies(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*CompanyListResponse, error) {
	out := new(CompanyListResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.company.CompanyService/GetCompanies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error) {
	out := new(grpc_gateway_common.CommonResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.company.CompanyService/DeleteCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanyService service

type CompanyServiceServer interface {
	CreateCompany(context.Context, *Company) (*grpc_gateway_common.IDResponse, error)
	UpdateCompany(context.Context, *Company) (*grpc_gateway_common.CommonResponse, error)
	GetCompany(context.Context, *grpc_gateway_common.IDRequest) (*CompanyResponse, error)
	GetCompanies(context.Context, *google_protobuf1.Empty) (*CompanyListResponse, error)
	DeleteCompany(context.Context, *grpc_gateway_common.IDRequest) (*grpc_gateway_common.CommonResponse, error)
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*grpc_gateway_common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.company.CompanyService/GetCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanies(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.company.CompanyService/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteCompany(ctx, req.(*grpc_gateway_common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "GetCompanies",
			Handler:    _CompanyService_GetCompanies_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _CompanyService_DeleteCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/company/company.proto",
}

func init() { proto.RegisterFile("proto/company/company.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xc1, 0x6e, 0x13, 0x31,
	0x10, 0x86, 0xb5, 0xdb, 0x15, 0x25, 0x13, 0xb6, 0x54, 0x2e, 0x54, 0xcb, 0x86, 0x42, 0x58, 0x84,
	0x14, 0x7a, 0xf0, 0xaa, 0x41, 0x5c, 0x38, 0x92, 0x56, 0x08, 0xa9, 0x5c, 0x16, 0x71, 0xe1, 0x82,
	0x9c, 0xec, 0x74, 0x65, 0x29, 0x6b, 0x9b, 0xb5, 0x5b, 0x54, 0x45, 0x08, 0x89, 0x57, 0xe0, 0x4d,
	0x78, 0x15, 0x5e, 0x81, 0x07, 0x41, 0xf1, 0xda, 0x21, 0x22, 0x21, 0xe4, 0xc0, 0x69, 0xec, 0xb1,
	0x67, 0xbe, 0x99, 0x5f, 0x3f, 0xf4, 0x54, 0x23, 0x8d, 0xcc, 0x27, 0xb2, 0x56, 0x4c, 0x5c, 0xfb,
	0x48, 0x6d, 0x96, 0xdc, 0xa9, 0x1a, 0x35, 0xa1, 0x15, 0x33, 0xf8, 0x89, 0x5d, 0x53, 0xf7, 0x96,
	0xde, 0xaf, 0xa4, 0xac, 0xa6, 0x98, 0x33, 0xc5, 0x73, 0x26, 0x84, 0x34, 0xcc, 0x70, 0x29, 0x74,
	0x5b, 0x93, 0xde, 0x5b, 0x34, 0xac, 0xa5, 0x70, 0xc1, 0x3d, 0xf5, 0x5c, 0xa1, 0xbd, 0x8d, 0x2f,
	0x2f, 0x72, 0xac, 0x95, 0x71, 0xac, 0xec, 0x1c, 0x76, 0x47, 0x2d, 0x80, 0xec, 0x41, 0xc8, 0xcb,
	0x24, 0xe8, 0x07, 0x83, 0x4e, 0x11, 0xf2, 0x92, 0x1c, 0x01, 0x70, 0xfd, 0x01, 0x05, 0x1b, 0x4f,
	0xb1, 0x4c, 0xc2, 0x7e, 0x30, 0xb8, 0x59, 0x74, 0xb8, 0x3e, 0x6b, 0x13, 0x84, 0x40, 0x24, 0x58,
	0x8d, 0xc9, 0x8e, 0x2d, 0xb0, 0xe7, 0xec, 0x0b, 0x1c, 0xb8, 0x6e, 0xe7, 0x5c, 0x9b, 0x02, 0xb5,
	0x92, 0x42, 0x23, 0x79, 0x0e, 0x51, 0x8d, 0x86, 0xd9, 0xde, 0xdd, 0xe1, 0x23, 0xfa, 0xe7, 0x7e,
	0xf3, 0x59, 0xdf, 0xa0, 0x61, 0xbe, 0xa0, 0xb0, 0xdf, 0xc9, 0x09, 0x44, 0x25, 0x33, 0x2c, 0x09,
	0xfb, 0x3b, 0x83, 0xee, 0xf0, 0x88, 0xae, 0x93, 0x85, 0x3a, 0x5e, 0x61, 0xbf, 0x66, 0x33, 0xb8,
	0xed, 0x13, 0xff, 0x0d, 0x1e, 0x6c, 0x09, 0x1f, 0x7e, 0x8f, 0x60, 0xcf, 0x65, 0xde, 0x62, 0x73,
	0xc5, 0x27, 0x48, 0x2a, 0x88, 0x47, 0x0d, 0x32, 0x83, 0x5e, 0xe4, 0xcd, 0x8d, 0xd2, 0x87, 0x6b,
	0xc7, 0x7b, 0x7d, 0xea, 0x87, 0xcb, 0x0e, 0xbf, 0xfe, 0xf8, 0xf9, 0x2d, 0xdc, 0xcf, 0xba, 0xf9,
	0xd5, 0x89, 0xb7, 0xcd, 0x8b, 0xe0, 0x98, 0x28, 0x88, 0xdf, 0xa9, 0x72, 0x7b, 0xd0, 0xe3, 0xb5,
	0xa0, 0x91, 0x0d, 0x0b, 0x58, 0xcf, 0xc2, 0xee, 0x66, 0xfb, 0x4b, 0xb0, 0x7c, 0xc6, 0xcb, 0xcf,
	0x73, 0x62, 0x0d, 0xf0, 0x0a, 0x8d, 0xc7, 0x3d, 0xf8, 0xeb, 0xe0, 0x1f, 0x2f, 0x51, 0x9b, 0xf4,
	0xc9, 0x66, 0x01, 0x3d, 0x31, 0xb1, 0x44, 0x42, 0x56, 0x88, 0xe4, 0x02, 0x6e, 0x2d, 0x70, 0x1c,
	0x35, 0x39, 0xa4, 0xad, 0xad, 0xa9, 0xb7, 0x35, 0x3d, 0x9b, 0xdb, 0x3a, 0x7d, 0xba, 0x11, 0xb4,
	0x6c, 0xcb, 0xec, 0xc0, 0xc2, 0x62, 0xb2, 0xac, 0x25, 0x11, 0x10, 0x9f, 0xe2, 0x14, 0x7f, 0x0b,
	0xf9, 0xaf, 0xcd, 0xb6, 0x52, 0xd2, 0xed, 0x75, 0xbc, 0xb2, 0xd7, 0xcb, 0xce, 0xfb, 0x5d, 0x77,
	0x1f, 0xdf, 0xb0, 0xab, 0x3c, 0xfb, 0x15, 0x00, 0x00, 0xff, 0xff, 0x21, 0x9a, 0x49, 0xd7, 0x1d,
	0x04, 0x00, 0x00,
}
