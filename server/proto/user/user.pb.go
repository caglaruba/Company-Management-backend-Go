// Code generated by protoc-gen-go.
// source: proto/user/user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	proto/user/user.proto

It has these top-level messages:
	LoginResponse
	UserListResponse
	UserResponse
	LoginRequest
	SMSConfirmationRequest
	User
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"
import grpc_gateway_common "git.simplendi.com/FirmQ/frontend-server/server/proto/common"
import google_protobuf1 "github.com/golang/protobuf/ptypes/empty"
import google_protobuf2 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LoginResponse struct {
	Meta  *grpc_gateway_common.MetaResponse `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Token string                            `protobuf:"bytes,2,opt,name=token" json:"token"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LoginResponse) GetMeta() *grpc_gateway_common.MetaResponse {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type UserListResponse struct {
	Meta *grpc_gateway_common.MetaResponse `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Data []*User                           `protobuf:"bytes,2,rep,name=data" json:"data"`
}

func (m *UserListResponse) Reset()                    { *m = UserListResponse{} }
func (m *UserListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()               {}
func (*UserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserListResponse) GetMeta() *grpc_gateway_common.MetaResponse {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UserListResponse) GetData() []*User {
	if m != nil {
		return m.Data
	}
	return nil
}

type UserResponse struct {
	Meta *grpc_gateway_common.MetaResponse `protobuf:"bytes,1,opt,name=meta" json:"meta"`
	Data *User                             `protobuf:"bytes,2,opt,name=data" json:"data"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserResponse) GetMeta() *grpc_gateway_common.MetaResponse {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UserResponse) GetData() *User {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoginRequest struct {
	Email    string `protobuf:"bytes,1,opt,name=email" json:"email"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password"`
	SmsCode  string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode" json:"sms_code"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LoginRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *LoginRequest) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

type SMSConfirmationRequest struct {
	Code string `protobuf:"bytes,1,opt,name=code" json:"code"`
}

func (m *SMSConfirmationRequest) Reset()                    { *m = SMSConfirmationRequest{} }
func (m *SMSConfirmationRequest) String() string            { return proto.CompactTextString(m) }
func (*SMSConfirmationRequest) ProtoMessage()               {}
func (*SMSConfirmationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SMSConfirmationRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type User struct {
	Id          string                      `protobuf:"bytes,1,opt,name=id" json:"id"`
	CompanyId   string                      `protobuf:"bytes,2,opt,name=company_id,json=companyId" json:"company_id"`
	Name        string                      `protobuf:"bytes,4,opt,name=name" json:"name"`
	Email       string                      `protobuf:"bytes,5,opt,name=email" json:"email"`
	Password    string                      `protobuf:"bytes,6,opt,name=password" json:"password"`
	Phone       string                      `protobuf:"bytes,7,opt,name=phone" json:"phone"`
	IsAdmin     bool                        `protobuf:"varint,3,opt,name=is_admin,json=isAdmin" json:"is_admin"`
	IsEnabled   bool                        `protobuf:"varint,8,opt,name=is_enabled,json=isEnabled" json:"is_enabled"`
	IsConfirmed bool                        `protobuf:"varint,9,opt,name=is_confirmed,json=isConfirmed" json:"is_confirmed"`
	EmailCode   string                      `protobuf:"bytes,10,opt,name=email_code,json=emailCode" json:"email_code"`
	SmsCode     string                      `protobuf:"bytes,11,opt,name=sms_code,json=smsCode" json:"sms_code"`
	EmailSentAt *google_protobuf2.Timestamp `protobuf:"bytes,12,opt,name=email_sent_at,json=emailSentAt" json:"email_sent_at"`
	SmsSentAt   *google_protobuf2.Timestamp `protobuf:"bytes,13,opt,name=sms_sent_at,json=smsSentAt" json:"sms_sent_at"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *User) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *User) GetCompanyId() string {
	if m != nil {
		return m.CompanyId
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *User) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *User) GetIsEnabled() bool {
	if m != nil {
		return m.IsEnabled
	}
	return false
}

func (m *User) GetIsConfirmed() bool {
	if m != nil {
		return m.IsConfirmed
	}
	return false
}

func (m *User) GetEmailCode() string {
	if m != nil {
		return m.EmailCode
	}
	return ""
}

func (m *User) GetSmsCode() string {
	if m != nil {
		return m.SmsCode
	}
	return ""
}

func (m *User) GetEmailSentAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.EmailSentAt
	}
	return nil
}

func (m *User) GetSmsSentAt() *google_protobuf2.Timestamp {
	if m != nil {
		return m.SmsSentAt
	}
	return nil
}

func init() {
	proto.RegisterType((*LoginResponse)(nil), "grpc.gateway.user.LoginResponse")
	proto.RegisterType((*UserListResponse)(nil), "grpc.gateway.user.UserListResponse")
	proto.RegisterType((*UserResponse)(nil), "grpc.gateway.user.UserResponse")
	proto.RegisterType((*LoginRequest)(nil), "grpc.gateway.user.LoginRequest")
	proto.RegisterType((*SMSConfirmationRequest)(nil), "grpc.gateway.user.SMSConfirmationRequest")
	proto.RegisterType((*User)(nil), "grpc.gateway.user.User")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	ConfirmEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error)
	GetUser(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error)
	GetUsers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*UserListResponse, error)
	GetUserByCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*UserListResponse, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ConfirmEmail(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/ConfirmEmail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*grpc_gateway_common.CommonResponse, error) {
	out := new(grpc_gateway_common.CommonResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *google_protobuf1.Empty, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserByCompany(ctx context.Context, in *grpc_gateway_common.IDRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := grpc.Invoke(ctx, "/grpc.gateway.user.UserService/GetUserByCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	CreateUser(context.Context, *User) (*UserResponse, error)
	ConfirmEmail(context.Context, *User) (*UserResponse, error)
	UpdateUser(context.Context, *User) (*UserResponse, error)
	GetUser(context.Context, *grpc_gateway_common.IDRequest) (*UserResponse, error)
	DeleteUser(context.Context, *grpc_gateway_common.IDRequest) (*grpc_gateway_common.CommonResponse, error)
	GetUsers(context.Context, *google_protobuf1.Empty) (*UserListResponse, error)
	GetUserByCompany(context.Context, *grpc_gateway_common.IDRequest) (*UserListResponse, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ConfirmEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ConfirmEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/ConfirmEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ConfirmEmail(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*grpc_gateway_common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*grpc_gateway_common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf1.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*google_protobuf1.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserByCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(grpc_gateway_common.IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserByCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.user.UserService/GetUserByCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserByCompany(ctx, req.(*grpc_gateway_common.IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "ConfirmEmail",
			Handler:    _UserService_ConfirmEmail_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByCompany",
			Handler:    _UserService_GetUserByCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user/user.proto",
}

func init() { proto.RegisterFile("proto/user/user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 748 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x4e, 0x1b, 0x39,
	0x14, 0x56, 0x42, 0x7e, 0x4f, 0x12, 0x96, 0xf5, 0x02, 0x3b, 0x64, 0x77, 0x21, 0x0c, 0x37, 0x2c,
	0xbb, 0x9d, 0x51, 0xa9, 0x7a, 0xc3, 0x45, 0x25, 0x08, 0xa8, 0x42, 0x82, 0x9b, 0xa4, 0x5c, 0xb4,
	0x54, 0x0a, 0x4e, 0xc6, 0x04, 0xab, 0x99, 0xf1, 0x74, 0x6c, 0x40, 0x11, 0xea, 0x4d, 0x5f, 0xa1,
	0xaf, 0xd0, 0x67, 0xe9, 0x0b, 0xf4, 0x15, 0xfa, 0x20, 0x95, 0x8f, 0x3d, 0x40, 0x42, 0xa2, 0xa8,
	0xa5, 0x37, 0x99, 0x39, 0x3e, 0x3e, 0xdf, 0xe7, 0xef, 0x9c, 0x6f, 0x1c, 0x58, 0x8a, 0x13, 0xa1,
	0x84, 0x7f, 0x29, 0x59, 0x82, 0x3f, 0x1e, 0xc6, 0xe4, 0xf7, 0x7e, 0x12, 0xf7, 0xbc, 0x3e, 0x55,
	0xec, 0x9a, 0x0e, 0x3d, 0x9d, 0xa8, 0xff, 0xdd, 0x17, 0xa2, 0x3f, 0x60, 0x3e, 0x8d, 0xb9, 0x4f,
	0xa3, 0x48, 0x28, 0xaa, 0xb8, 0x88, 0xa4, 0x29, 0xa8, 0xaf, 0x18, 0x9c, 0x9e, 0x08, 0x43, 0x11,
	0xd9, 0x87, 0x4d, 0xfd, 0x65, 0x0b, 0x31, 0xea, 0x5e, 0x9e, 0xfb, 0x2c, 0x8c, 0xd5, 0xd0, 0x26,
	0xd7, 0xc6, 0x93, 0x8a, 0x87, 0x4c, 0x2a, 0x1a, 0xc6, 0x66, 0x83, 0xfb, 0x16, 0x6a, 0x47, 0xa2,
	0xcf, 0xa3, 0x16, 0x93, 0xb1, 0x88, 0x24, 0x23, 0xcf, 0x21, 0x17, 0x32, 0x45, 0x9d, 0x4c, 0x23,
	0xb3, 0x59, 0xd9, 0x5e, 0xf7, 0x46, 0x4e, 0x6a, 0x89, 0x8f, 0x99, 0xa2, 0x69, 0x41, 0x0b, 0xb7,
	0x93, 0x45, 0xc8, 0x2b, 0xf1, 0x8e, 0x45, 0x4e, 0xb6, 0x91, 0xd9, 0x2c, 0xb7, 0x4c, 0xe0, 0x5e,
	0xc1, 0xc2, 0x89, 0x64, 0xc9, 0x11, 0x97, 0xea, 0xb1, 0x04, 0xff, 0x41, 0x2e, 0xa0, 0x8a, 0x3a,
	0xd9, 0xc6, 0xdc, 0x66, 0x65, 0xfb, 0x4f, 0xef, 0x41, 0x07, 0x3d, 0xcd, 0xd4, 0xc2, 0x4d, 0x6e,
	0x02, 0x55, 0x8c, 0x7e, 0x19, 0x67, 0x66, 0x36, 0xe7, 0x29, 0x54, 0x6d, 0x27, 0xdf, 0x5f, 0x32,
	0xa9, 0x74, 0x47, 0x58, 0x48, 0xf9, 0x00, 0x49, 0xcb, 0x2d, 0x13, 0x90, 0x3a, 0x94, 0x62, 0x2a,
	0xe5, 0xb5, 0x48, 0x02, 0xdb, 0xaa, 0xdb, 0x98, 0xac, 0x40, 0x49, 0x86, 0xb2, 0xd3, 0x13, 0x01,
	0x73, 0xe6, 0x30, 0x57, 0x94, 0xa1, 0x6c, 0x8a, 0x80, 0xb9, 0xff, 0xc3, 0x72, 0xfb, 0xb8, 0xdd,
	0x14, 0xd1, 0x39, 0x4f, 0x42, 0x74, 0x46, 0x4a, 0x43, 0x20, 0x87, 0x05, 0x86, 0x05, 0xdf, 0xdd,
	0xcf, 0x73, 0x90, 0xd3, 0x27, 0x23, 0xf3, 0x90, 0xe5, 0x81, 0x4d, 0x65, 0x79, 0x40, 0xfe, 0x01,
	0xe8, 0x89, 0x30, 0xa6, 0xd1, 0xb0, 0xc3, 0x53, 0xfe, 0xb2, 0x5d, 0x39, 0x0c, 0x34, 0x56, 0x44,
	0x43, 0xe6, 0xe4, 0x0c, 0x96, 0x7e, 0xbf, 0x93, 0x91, 0x9f, 0x26, 0xa3, 0x30, 0x26, 0x63, 0x11,
	0xf2, 0xf1, 0x85, 0x88, 0x98, 0x53, 0x34, 0x15, 0x18, 0x68, 0x71, 0x5c, 0x76, 0x68, 0x10, 0xf2,
	0x08, 0xc5, 0x95, 0x5a, 0x45, 0x2e, 0x77, 0x75, 0xa8, 0x4f, 0xc5, 0x65, 0x87, 0x45, 0xb4, 0x3b,
	0x60, 0x81, 0x53, 0xc2, 0x64, 0x99, 0xcb, 0x03, 0xb3, 0x40, 0xd6, 0xa1, 0xca, 0x75, 0x57, 0x50,
	0x3b, 0x0b, 0x9c, 0x32, 0x6e, 0xa8, 0x70, 0xd9, 0x4c, 0x97, 0x34, 0x02, 0x9e, 0xcb, 0xf4, 0x0e,
	0x8c, 0x2e, 0x5c, 0xd1, 0xdd, 0x1b, 0x69, 0x6c, 0x65, 0xa4, 0xb1, 0xe4, 0x05, 0xd4, 0x4c, 0xa5,
	0x64, 0x91, 0xea, 0x50, 0xe5, 0x54, 0x71, 0xd6, 0x75, 0xcf, 0x7c, 0x38, 0x5e, 0xfa, 0xe1, 0x78,
	0xaf, 0xd2, 0x0f, 0xa7, 0x55, 0xc1, 0x82, 0x36, 0x8b, 0xd4, 0xae, 0x22, 0x3b, 0x50, 0xd1, 0xd0,
	0x69, 0x75, 0x6d, 0x66, 0x75, 0x59, 0x86, 0xd2, 0xd4, 0x6e, 0x7f, 0x29, 0x40, 0x45, 0x8f, 0xa9,
	0xcd, 0x92, 0x2b, 0xde, 0x63, 0xe4, 0x0c, 0xf2, 0xe8, 0x20, 0xb2, 0x36, 0xc1, 0x69, 0xf7, 0xbd,
	0x55, 0x6f, 0x4c, 0xdf, 0x60, 0x0c, 0xec, 0x2e, 0x7e, 0xfc, 0xfa, 0xed, 0x53, 0x76, 0xde, 0x2d,
	0xfb, 0x57, 0x4f, 0xfd, 0x81, 0x4e, 0xed, 0x64, 0xb6, 0xc8, 0x29, 0x40, 0x33, 0x61, 0x54, 0x31,
	0x74, 0xc7, 0x34, 0x43, 0xd7, 0xd7, 0xa6, 0x39, 0x3d, 0x45, 0xff, 0x03, 0xd1, 0x6b, 0x6e, 0x49,
	0xa3, 0xeb, 0xb4, 0x06, 0x97, 0x50, 0xb5, 0x13, 0x39, 0x40, 0x8f, 0xfc, 0x3c, 0xfc, 0xbf, 0x08,
	0xbf, 0xe1, 0xae, 0x6a, 0x78, 0x3b, 0xf8, 0x27, 0xd8, 0x75, 0xff, 0xe6, 0x6e, 0xce, 0x1f, 0x34,
	0xe9, 0x19, 0xc0, 0x49, 0x1c, 0x3c, 0x5e, 0x91, 0x83, 0x94, 0xc4, 0xad, 0xa5, 0x8a, 0xfc, 0x1b,
	0x1e, 0x20, 0x03, 0x85, 0xe2, 0x4b, 0xa6, 0x10, 0x7e, 0x75, 0xe2, 0xc5, 0x71, 0xb8, 0x9f, 0x8e,
	0x65, 0x26, 0xcb, 0x12, 0xb2, 0xfc, 0x46, 0x46, 0x59, 0xc8, 0x05, 0xc0, 0x3e, 0x1b, 0x30, 0x2b,
	0x62, 0x16, 0xcb, 0xc6, 0xc4, 0x7c, 0x13, 0x1f, 0xe3, 0x4c, 0x5b, 0x63, 0x4c, 0xaf, 0xa1, 0x64,
	0xc5, 0x48, 0xb2, 0xfc, 0xc0, 0xa5, 0x07, 0xfa, 0x9f, 0x63, 0x1c, 0xff, 0x56, 0xc5, 0xfd, 0x5b,
	0xdc, 0x5d, 0x40, 0x7c, 0x20, 0xb7, 0x0e, 0x20, 0x43, 0x58, 0xb0, 0xd0, 0x7b, 0xc3, 0xa6, 0xb9,
	0x52, 0x7e, 0x54, 0xca, 0x64, 0xaa, 0x06, 0x52, 0xd5, 0x89, 0x93, 0x52, 0x75, 0xba, 0xc3, 0x8e,
	0xbd, 0xb4, 0x50, 0xd5, 0x5e, 0xe1, 0x4d, 0x4e, 0xaf, 0x77, 0x0b, 0xa8, 0xe4, 0xd9, 0xf7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdf, 0x5b, 0x02, 0x38, 0x76, 0x07, 0x00, 0x00,
}
